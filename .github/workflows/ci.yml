name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: |
        npm run lint
        npm run lint:css

    - name: Run security audit
      run: npm audit --audit-level=moderate

    - name: Build project
      run: npm run build

    - name: Run tests
      run: npm test

  lighthouse:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build project
      run: npm run build

    - name: Start server
      run: |
        npm run dev &
        sleep 10

    - name: Run Lighthouse CI
      run: |
        npm install -g @lhci/cli
        lhci autorun

    - name: Upload Lighthouse results
      uses: actions/upload-artifact@v4
      with:
        name: lighthouse-results
        path: .lighthouseci/

  performance:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build project
      run: npm run build

    - name: Check bundle size
      run: |
        echo "CSS Bundle Size:"
        ls -lh public/css/main.min.css || echo "CSS file not found"
        echo "JS Bundle Size:"
        ls -lh public/js/main.min.js || echo "JS file not found"
        echo "Vendor Bundle Size:"
        ls -lh public/js/vendor.min.js || echo "Vendor file not found"

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test, lighthouse, performance]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build for production
      run: npm run build:prod

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # Example: rsync, S3 sync, etc.

  deploy-production:
    runs-on: ubuntu-latest
    needs: [test, lighthouse, performance]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build for production
      run: npm run build:prod

    - name: Generate build report
      run: |
        echo "Build completed at $(date)" > build-report.txt
        echo "Commit: ${{ github.sha }}" >> build-report.txt
        echo "Branch: ${{ github.ref }}" >> build-report.txt

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # Example: rsync, S3 sync, etc.

    - name: Notify deployment
      run: |
        echo "Production deployment completed successfully!"
        # Add notification commands here (Slack, email, etc.)

  security-scan:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Run security scan
      uses: github/codeql-action/init@v3
      with:
        languages: javascript

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
